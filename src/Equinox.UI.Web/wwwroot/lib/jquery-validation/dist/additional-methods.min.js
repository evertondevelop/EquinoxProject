/*!
 * jQuery Validation Plugin - v1.17.0 - 7/29/2017
 * https://jqueryvalidation.org/
 * Copyright (c) 2017 JÃ¶rn Zaefferer; Licensed MIT
 */

(function ($) {
    'use strict';

    // Adds a method for validating max words
    $.validator.addMethod("maxWords", function (value, element, params) {
        return this.optional(element) || countWords(value) <= params;
    }, $.validator.format("Please enter {0} words or less."));

    // Adds a method for validating min words
    $.validator.addMethod("minWords", function (value, element, params) {
        return this.optional(element) || countWords(value) >= params;
    }, $.validator.format("Please enter at least {0} words."));

    // Adds a method for validating range of words
    $.validator.addMethod("rangeWords", function (value, element, params) {
        var words = countWords(value);
        return this.optional(element) || (words >= params[0] && words <= params[1]);
    }, $.validator.format("Please enter between {0} and {1} words."));

    // Adds a method for validating file extension
    $.validator.addMethod("extension", function (value, element, params) {
        var extensions = params.replace(/,/g, "|");
        return this.optional(element) || value.match(new RegExp("\\.(" + extensions + ")$", "i"));
    }, $.validator.format("Please enter a value with a valid extension."));

    // Adds a method for validating IBAN
    $.validator.addMethod("iban", function (value, element) {
        if (this.optional(element)) return true;

        var countryCode = value.substring(0, 2);
        if (!ibanRegex[countryCode]) return false;

        value = value.replace(/ /g, "").toUpperCase();
        return ibanRegex[countryCode].test(value);
    }, "Please specify a valid IBAN");

    // Adds a method for validating NIE
    $.validator.addMethod("nieES", function (value, element) {
        if (this.optional(element)) return true;

        return /^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/i.test(value) &&
            getLetter(value) === getCheckLetter(value);
    }, "Please specify a valid NIE number.");

    // Adds a method for validating NIF
    $.validator.addMethod("nifES", function (value, element) {
        if (this.optional(element)) return true;

        return /^[0-9]{8}[A-Z]{1}$/.test(value) ?
            getLetter(value) === getCheckLetter(value) :
            /^[KLM]{1}[0-9]{7}[ABEHMNPRVWXY]{1}$/i.test(value);
    }, "Please specify a valid NIF number.");

    // Adds a method for validating VIN
    $.validator.addMethod("vinUS", function (value) {
        if (value.length !== 17) return false;

        var weights = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];
        var sum = 0;
        var weightedDigits = [];

        for (var i = 0; i < value.length; i++) {
            var char = value.charAt(i);
            if (char.match(/[0-9]/)) {
                weightedDigits.push(parseInt(char, 10) * weights[i]);
            } else if (char.match(/[A-HJ-NPR-Z]/)) {
                weightedDigits.push(weights[i] + 9);
            } else if (char.match(/[K]/)) {
                weightedDigits.push(weights[i] + 10);
            } else if (char.match(/[Q]/)) {
                weightedDigits.push(weights[i] + 11);
            } else if (char.match(/[W]/)) {
                weightedDigits.push(weights[i] + 12);
            } else if (char.match(/[Y]/)) {
                weightedDigits.push(weights[i] + 13);
            } else if (char.match(/[Z]/)) {
                weightedDigits.push(weights[i] + 14);
            } else {
                return false;
            }
        }

        for (var j = 0; j < weightedDigits.length; j += 2) {
            sum += weightedDigits[j];
        }

        for (var k = 1; k < weightedDigits.length; k += 2) {
            var digit = weightedDigits[k];
            sum += Math.floor(digit / 10) + (digit % 10);
        }

        return sum % 11 === 0;
    }, "The specified vehicle identification number (VIN) is invalid.");

    // Adds a method for validating US ZIP Code
    $.validator.addMethod("zipcodeUS", function (value, element) {
        return this.optional(element) || /^\d{5}(-\d{4})?$/.test(value);
    }, "The specified US ZIP Code is invalid.");

    // Adds a method for validating ZIP range
    $.validator.addMethod("ziprange", function (value, element) {
        return this.optional(element) || /^902\d{2}-\d{4}$/.test(value
