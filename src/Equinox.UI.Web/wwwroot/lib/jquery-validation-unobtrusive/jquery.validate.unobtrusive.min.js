// Unobtrusive validation support library for jQuery and jQuery Validate
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
// @version v3.2.11

// Defines a self-invoking anonymous function that takes 'a' as a parameter,
// which is a jQuery object.
!function (a) {

    // Defines the 'e' function, which adds rules and messages to a validator object.
    function e(a, e, n) {
        a.rules[e] = n;
        a.message && (a.messages[e] = a.message);
    }

    // Defines the 'n' function, which splits a string into an array of strings
    // using a specified delimiter.
    function n(a) {
        return a.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
    }

    // Defines the 't' function, which escapes special characters in a string.
    function t(a) {
        return a.replace(/([!"#$%&'()*+,.\/:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
    }

    // Defines the 'r' function, which returns the root part of a dotted string.
    function r(a) {
        return a.substr(0, a.lastIndexOf(".") + 1);
    }

    // Defines the 'i' function, which replaces a specified string with another.
    function i(a, e) {
        return 0 === a.indexOf("*.") && (a = a.replace("*.", e)), a;
    }

    // Defines the 'o' function, which handles error messages for a form element.
    function o(e, n) {
        var r = a(this).find("[data-valmsg-for='" + t(n[0].name) + "']"),
            i = r.attr("data-valmsg-replace"),
            o = i ? a.parseJSON(i) !== !1 : null;

        r.removeClass("field-validation-valid").addClass("field-validation-error"),
            e.data("unobtrusiveContainer", r),
            o ? (r.empty(), e.removeClass("input-validation-error").appendTo(r)) : e.hide();
    }

    // Defines the 'd' function, which handles error messages for a form summary.
    function d(e, n) {
        var t = a(this).find("[data-valmsg-summary=true]"),
            r = t.find("ul");

        r && r.length && n.errorList.length && (r.empty(),
            t.addClass("validation-summary-errors").removeClass("validation-summary-valid"),
            a.each(n.errorList, function () {
                a("<li />").html(this.message).appendTo(r);
            }));
    }

    // Defines the 's' function, which handles success messages for a form element.
    function s(e) {
        var n = a(this),
            t = n.attr("data-valmsg-summary");

        if (t) {
            var r = a(this).data("unobtrusiveContainer");
            r.addClass("field-validation-valid").removeClass("field-validation-error");
        }

        n.removeClass("input-validation-error").addClass("field-validation-valid").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer");
    }

    // Defines the 'l' function, which resets validation messages for a form.
    function u(e) {
        var n = a(e),
            t = n.data("validator"),
            r = n.data("unobtrusiveContainer");

        if (r) {
            var i = a(r).attr("data-valmsg-replace"),
                o = i ? a.parseJSON(i) !== !1 : null;

            a(r).addClass("field-validation-valid").removeClass("field-validation-error"),
                n.removeData("unobtrusiveContainer"),
                o && a(r).empty();
        }

        if (t) {
            t.resetForm();
        }

        n.find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors"),
            n.find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer");
    }

    // Defines the 'm' variable, which is an object that contains validation options.
    var m, f = a.validator,
        v = "unobtrusiveValidation";

    // Defines the 'parseElement' function, which parses a form element for validation.
    f.unobtrusive.parseElement = function (e, n) {
        var t, r, i, o = a(e),
            d = o.parents("form")[0];

        if (d) {
            t = u(d),
                t.options.rules[e.name] = r = {},
                t.options.messages[e.name] = i = {},
                a.each(this.adapters, function () {
                    var n = "data-val-" + this.name,
                        t = o.attr(n),
                        s = {};

                    if (void 0 !== t) {
                        n += "-",
                            a.each(this.params, function () {
                                s[this] = o.attr(n + this);
                            }),
                            this.adapt({
                                element: e,
                                form: d,
                                message: t,
                                params: s,
                                rules: r,
                                messages: i
                            });
                    }
                }),
              
