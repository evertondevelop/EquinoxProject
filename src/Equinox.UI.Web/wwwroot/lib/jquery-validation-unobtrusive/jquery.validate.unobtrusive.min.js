// Unobtrusive validation support library for jQuery and jQuery Validate
// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
// @version v3.2.11

!function (a) {

    function addRulesAndMessages(validator, element, rules, messages) {
        validator.rules[element.name] = rules;
        validator.messages[element.name] = messages;
    }

    function splitString(str) {
        return str.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
    }

    function escapeRegExpChars(str) {
        return str.replace(/([!"#$%&'()*+,.\/:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
    }

    function getRoot(str) {
        return str.substr(0, str.lastIndexOf(".") + 1);
    }

    function replaceString(str, replace) {
        return 0 === str.indexOf("*.$") ? str.replace("*.", replace) : str;
    }

    function handleErrorMessageForElement(validator, element, message) {
        var container = validator.find("[data-valmsg-for='" + escapeRegExpChars(element.name) + "']"),
            replace = container.attr("data-valmsg-replace"),
            shouldReplace = replace ? a.parseJSON(replace) !== !1 : null;

        container.removeClass("field-validation-valid").addClass("field-validation-error");
        validator.data("unobtrusiveContainer", container);

        if (shouldReplace) {
            container.empty();
            validator.removeClass("input-validation-error").appendTo(container);
        } else {
            validator.hide();
        }
    }

    function handleErrorMessageForSummary(validator, message) {
        var summary = validator.find("[data-valmsg-summary=true]"),
            list = summary.find("ul");

        list && list.length && message.errorList.length && (list.empty(),
            summary.addClass("validation-summary-errors").removeClass("validation-summary-valid"),
            a.each(message.errorList, function () {
                a("<li />").html(this.message).appendTo(list);
            }));
    }

    function handleSuccessMessageForElement(validator, element) {
        var summary = validator.data("unobtrusiveContainer");

        if (summary) {
            summary.addClass("field-validation-valid").removeClass("field-validation-error");
        }

        validator.removeClass("input-validation-error").addClass("field-validation-valid").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer");
    }

    function resetValidationMessagesForForm(form) {
        var validator = a(form).data("validator"),
            container = a(form).data("unobtrusiveContainer");

        if (container) {
            container.addClass("field-validation-valid").removeClass("field-validation-error");
        }

        if (validator) {
            validator.resetForm();
        }

        a(form).find(".validation-summary-errors").addClass("validation-summary-valid").removeClass("validation-summary-errors"),
            a(form).find(".field-validation-error").addClass("field-validation-valid").removeClass("field-validation-error").removeData("unobtrusiveContainer").find(">*").removeData("unobtrusiveContainer");
    }

    var unobtrusiveValidationOptions = {
        parseElement: function (element, options) {
            var validator = a(element).data("validator"),
                rules = {},
                messages = {};

            a.each(this.adapters, function () {
                var name = "data-val-" + this.name,
                    value = element.getAttribute(name),
                    params = {};

                if (value) {
                    name += "-";
                    a.each(this.params, function () {
                        params[this] = element.getAttribute(name + this);
                    });
                    this.adapt({
                        element: element,
                        form: element.form,
                        message: value,
                        params: params,
                        rules: rules,
                        messages: messages
                    });
                }
            });

            if (options.rules) {
                a.extend(rules, options.rules);
            }

            if (options.messages) {
                a.extend(messages, options.messages);
            }

            addRulesAndMessages(validator, element, rules, messages);
        }
    };

    a.extend(a.validator, unobtrusiveValidationOptions);

}(jQuery);
