using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace YourNamespace.ViewComponents
{
    public class NavbarViewComponent : ViewComponent
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;

        public NavbarViewComponent(SignInManager<IdentityUser> signInManager, UserManager<IdentityUser> userManager)
        {
            _signInManager = signInManager;
            _userManager = userManager;
        }

        public async Task<IViewComponentResult> InvokeAsync()
        {
            var isSignedIn = _signInManager.IsSignedIn(HttpContext.User);
            var user = isSignedIn ? await _userManager.GetUserAsync(HttpContext.User) : null;

            return View(new NavbarViewModel
            {
                IsSignedIn = isSignedIn,
                UserName = user != null ? user.UserName : null,
            });
        }
    }

    public class NavbarViewModel
    {
        public bool IsSignedIn { get; set; }
        public string UserName { get; set; }
    }
}


@model YourNamespace.ViewComponents.NavbarViewModel

<ul class="navbar-nav">
    @if (Model.IsSignedIn)
    {
        <li class="nav-item">
            <a class="nav-link text-light" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @Model.UserName!</a>
        </li>
        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout"
